
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Speakeasy.Bar
{
    using Newtonsoft.Json;
    using Speakeasy.Bar.Models.Components;
    using Speakeasy.Bar.Utils;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;
    using System;


    /// <summary>
    /// The environment name. Defaults to the production environment.
    /// </summary>
    public enum ServerEnvironment
    {
        [JsonProperty("prod")]
        Prod,
        [JsonProperty("staging")]
        Staging,
        [JsonProperty("dev")]
        Dev,
    }

    public static class ServerEnvironmentExtension
    {
        public static string Value(this ServerEnvironment value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static ServerEnvironment ToEnum(this string value)
        {
            foreach(var field in typeof(ServerEnvironment).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is ServerEnvironment)
                    {
                        return (ServerEnvironment)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum ServerEnvironment");
        }
    }

    /// <summary>
    /// The Speakeasy Bar: A bar that serves drinks.
    /// 
    /// <remarks>
    /// A secret underground bar that serves drinks to those in the know.
    /// </remarks>
    /// 
    /// <see>https://docs.speakeasy.bar} - The Speakeasy Bar Documentation.</see>
    /// </summary>
    public interface ISpeakeasy
    {

        /// <summary>
        /// The authentication endpoints.
        /// </summary>
        public IAuthentication Authentication { get; }

        /// <summary>
        /// The drinks endpoints.
        /// </summary>
        public IDrinks Drinks { get; }

        /// <summary>
        /// The ingredients endpoints.
        /// </summary>
        public IIngredients Ingredients { get; }

        /// <summary>
        /// The orders endpoints.
        /// </summary>
        public IOrders Orders { get; }
        public IConfig Config { get; }
    }

    public class SDKConfig
    {
        /// <summary>
        /// Server identifiers available to the SDK.
        /// </summary>
        public enum Server {
        Prod,
        Staging,
        Customer,
        }

        /// <summary>
        /// Server URLs available to the SDK.
        /// </summary>
        public static readonly Dictionary<Server, string> ServerMap = new Dictionary<Server, string>()
        {
            { Server.Prod, "https://speakeasy.bar" },
            { Server.Staging, "https://staging.speakeasy.bar" },
            { Server.Customer, "https://{organization}.{environment}.speakeasy.bar" },
        };

        public string serverUrl = "";
        public Server? server = null;
        public Dictionary<Server, Dictionary<string, string>> ServerDefaults = new Dictionary<Server, Dictionary<string, string>>();

        public string GetTemplatedServerDetails()
        {
            if (!String.IsNullOrEmpty(this.serverUrl))
            {
                return Utilities.TemplateUrl(Utilities.RemoveSuffix(this.serverUrl, "/"), new Dictionary<string, string>());
            }
            if (this.server is null)
            {
                this.server = SDKConfig.Server.Prod;
            }
            else if (!SDKConfig.ServerMap.ContainsKey(this.server.Value))
            {
                throw new Exception($"Invalid server \"{this.server.Value}\"");
            }

            Dictionary<string, string> serverDefault = new Dictionary<string, string>();

            if (this.ServerDefaults.ContainsKey(this.server.Value))
            {
                serverDefault = this.ServerDefaults[this.server.Value];
            }

            return Utilities.TemplateUrl(SDKConfig.ServerMap[this.server.Value], serverDefault);
        }
    }

    /// <summary>
    /// The Speakeasy Bar: A bar that serves drinks.
    /// 
    /// <remarks>
    /// A secret underground bar that serves drinks to those in the know.
    /// </remarks>
    /// 
    /// <see>https://docs.speakeasy.bar} - The Speakeasy Bar Documentation.</see>
    /// </summary>
    public class Speakeasy: ISpeakeasy
    {
        public SDKConfig SDKConfiguration { get; private set; }

        private const string _language = "csharp";
        private const string _sdkVersion = "0.0.1";
        private const string _sdkGenVersion = "2.286.7";
        private const string _openapiDocVersion = "1.0.0";
        private const string _userAgent = "speakeasy-sdk/csharp 0.0.1 2.286.7 1.0.0 Speakeasy.Bar";
        private string _serverUrl = "";
        private SDKConfig.Server? _server = null;
        private ISpeakeasyHttpClient _defaultClient;
        private Func<Security>? _securitySource;
        public IAuthentication Authentication { get; private set; }
        public IDrinks Drinks { get; private set; }
        public IIngredients Ingredients { get; private set; }
        public IOrders Orders { get; private set; }
        public IConfig Config { get; private set; }

        public Speakeasy(string? apiKey = null, Func<string>? apiKeySource = null, SDKConfig.Server? server = null, ServerEnvironment? environment = null, string?  organization = null, string? serverUrl = null, Dictionary<string, string>? urlParams = null, ISpeakeasyHttpClient? client = null)
        {
            if (server != null)
            {
              _server = server;
            }

            if (serverUrl != null)
            {
                if (urlParams != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, urlParams);
                }
                _serverUrl = serverUrl;
            }

            Dictionary<SDKConfig.Server, Dictionary<string, string>> serverDefaults = new Dictionary<SDKConfig.Server, Dictionary<string, string>>()
            {
                {SDKConfig.Server.Prod, new Dictionary<string, string>()
                {
                }},
                {SDKConfig.Server.Staging, new Dictionary<string, string>()
                {
                }},
                {SDKConfig.Server.Customer, new Dictionary<string, string>()
                {
                    {"environment", environment == null ? "prod" : ServerEnvironmentExtension.Value(environment.Value)},
                    {"organization", organization == null ? "api" : organization},
                }},
            };

            _defaultClient = new SpeakeasyHttpClient(client);

            if(apiKeySource != null)
            {
                _securitySource = () => new Security() { ApiKey = apiKeySource() };
            }
            else if(apiKey != null)
            {
                _securitySource = () => new Security() { ApiKey = apiKey };
            }
            else
            {
                throw new Exception("apiKey and apiKeySource cannot both be null");
            }

            SDKConfiguration = new SDKConfig()
            {
                ServerDefaults = serverDefaults,
                server = _server,
                serverUrl = _serverUrl
            };

            Authentication = new Authentication(_defaultClient, _securitySource, _serverUrl, SDKConfiguration);
            Drinks = new Drinks(_defaultClient, _securitySource, _serverUrl, SDKConfiguration);
            Ingredients = new Ingredients(_defaultClient, _securitySource, _serverUrl, SDKConfiguration);
            Orders = new Orders(_defaultClient, _securitySource, _serverUrl, SDKConfiguration);
            Config = new Config(_defaultClient, _securitySource, _serverUrl, SDKConfiguration);
        }
    }
}
